services:
  dataportal:
    image: "${DATAPORTAL_IMAGE}"
    container_name: data-portal
    ports:
      - "80:80"
    networks:
      - epos_network
    restart: always
    environment:
      - BASE_URL=${DATAPORTAL_DEPLOY_PATH}
      - API_HOST=${GATEWAY_HOST}
    depends_on:
      gateway:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS Data Portal - Web frontend for the EPOS system"
      katenary.v3/values: |-
        - BASE_URL
        - API_HOST
      katenary.v3/ingress: |-
        enabled: true
        host: "localhost"
        path: "${DATAPORTAL_DEPLOY_PATH}"
        pathType: Prefix
        port: 80
        class: "${INGRESS_CLASS}"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: "${DATAPORTAL_DEPLOY_PATH}"
        tls:
          enabled: false

  backofficeui:
    image: "${BACKOFFICE_UI_IMAGE}"
    container_name: backofficeui
    ports:
      - "80:80"
    networks:
      - epos_network
    restart: always
    environment:
      - BASE_URL=${BACKOFFICE_DEPLOY_PATH}
      - API_HOST=${GATEWAY_HOST}
    depends_on:
      gateway:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS BACKOFFICE UI - Web backoffice for the EPOS system"
      katenary.v3/values: |-
        - BASE_URL
        - API_HOST
      katenary.v3/ingress: |-
        enabled: true
        host: "localhost"
        path: "${BACKOFFICE_DEPLOY_PATH}"
        pathType: Prefix
        port: 80
        class: "${INGRESS_CLASS}"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: "${BACKOFFICE_DEPLOY_PATH}"
        tls:
          enabled: false

  gateway:
    image: "${GATEWAY_IMAGE}"
    container_name: gateway
    ports:
      - "5000:5000"
    networks:
      - epos_network
    restart: always
    environment:
      - PREFIX=${PREFIX}
      - LOAD_RESOURCES_API=${LOAD_RESOURCES_API}
      - LOAD_INGESTOR_API=${LOAD_INGESTOR_API}
      - LOAD_EXTERNAL_ACCESS_API=${LOAD_EXTERNAL_ACCESS_API}
      - LOAD_BACKOFFICE_API=${LOAD_BACKOFFICE_API}
      - LOAD_CONVERTER_API=${LOAD_CONVERTER_API}
      - LOAD_SHARING_API=${LOAD_SHARING_API}
      - LOAD_EMAIL_SENDER_API=${LOAD_EMAIL_SENDER_API}
      - IS_AAI_ENABLED=${IS_AAI_ENABLED}
      - SECURITY_KEY=${SECURITY_KEY}
      - AAI_SERVICE_ENDPOINT=${AAI_SERVICE_ENDPOINT}
    healthcheck:
      test: python3 -c 'import urllib.request; resp=urllib.request.urlopen("http://localhost:5000/api/v1/ui", timeout=5); print(f"Status {resp.getcode()}"); exit(0 if resp.getcode() == 200 else 1)' || exit 1
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      resourcesservice:
        condition: service_healthy
      backofficeservice:
        condition: service_healthy
      ingestorservice:
        condition: service_healthy
      externalaccessservice:
        condition: service_healthy
      converterservice:
        condition: service_healthy
      converterroutine:
        condition: service_healthy
      sharingservice:
        condition: service_healthy
      emailsenderservice:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS API Gateway - Central API gateway for all services"
      katenary.v3/values: |-
        - PREFIX
        - LOAD_RESOURCES_API
        - LOAD_INGESTOR_API
        - LOAD_EXTERNAL_ACCESS_API
        - LOAD_BACKOFFICE_API
        - LOAD_CONVERTER_API
        - LOAD_SHARING_API
        - LOAD_EMAIL_SENDER_API
        - IS_AAI_ENABLED
        - SECURITY_KEY
        - AAI_SERVICE_ENDPOINT
      katenary.v3/ingress: |-
        enabled: true
        host: "localhost"
        path: "${API_DEPLOY_PATH}"
        pathType: Prefix
        port: 5000
        class: "${INGRESS_CLASS}"
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: "${API_DEPLOY_PATH}"
        tls:
          enabled: false

  metadatapopulator:
    image: "epos/metadata-cache:latest"
    container_name: metadatapopulator
    networks:
      - epos_network
    restart: "no"
    environment:
      - SECURITY_CODE=changeme
      - MAX_PARALLEL=10
    ports:
      - "80:80"
    command:
      - /bin/sh
      - -c
      - |
        set -eu

        nginx
        echo "[nginx] started"

        echo "[wait] ingestorservice..."

        until curl -fsS "http://{{ include "epos-chart.fullname"  . }}-ingestorservice:8080/api/ingestor-service/v1/actuator/health" >/dev/null 2>&1; do
          sleep 2
        done

        echo "[init] Ontologies registration "
        curl -fsS -X POST --header "accept: */*" \
          'http://{{ include "epos-chart.fullname"  . }}-ingestorservice:8080/api/ingestor-service/v1/ontology?path=https://raw.githubusercontent.com/epos-eu/EPOS-DCAT-AP/EPOS-DCAT-AP-shapes/epos-dcat-ap_shapes.ttl&securityCode={{ .Values.metadatapopulator.environment.SECURITY_CODE }}&name=EPOS-DCAT-AP-V1&type=BASE'

        curl -fsS -X POST --header "accept: */*" \
          'http://{{ include "epos-chart.fullname"  . }}-ingestorservice:8080/api/ingestor-service/v1/ontology?path=https://raw.githubusercontent.com/epos-eu/EPOS-DCAT-AP/EPOS-DCAT-AP-v3.0/docs/epos-dcat-ap_v3.0.0_shacl.ttl&securityCode={{ .Values.metadatapopulator.environment.SECURITY_CODE }}&name=EPOS-DCAT-AP-V3&type=BASE'

        curl -fsS -X POST --header "accept: */*" \
          'http://{{ include "epos-chart.fullname"  . }}-ingestorservice:8080/api/ingestor-service/v1/ontology?path=https://raw.githubusercontent.com/epos-eu/EPOS_Data_Model_Mapping/main/edm-schema-shapes.ttl&securityCode={{ .Values.metadatapopulator.environment.SECURITY_CODE }}&name=EDM-TO-DCAT-AP&type=MAPPING'

        echo "[sleep] 10s..."
        sleep 10

        SECONDS=0

        echo "[fetch] Download index: 'http://{{ include "epos-chart.fullname"  . }}-metadatapopulator/index.txt'"
        files="$$(curl -fsS 'http://{{ include "epos-chart.fullname"  . }}-metadatapopulator/index.txt' | tr -d '\r' | sed '/^[[:space:]]*$$/d')"

        get_group_name() {
          case "$$1" in
            *tcs-geomag*) echo 'Geomagnetic%20Observations' ;;
            *tcs-gnss*)   echo 'GNSS%20Data%20and%20Products' ;;
            *tcs-vo*)     echo 'Volcano%20Observations' ;;
            *tcs-gim*)    echo 'Geological%20Information%20and%20Modeling' ;;
            *tcs-seismo*) echo 'Seismology' ;;
            *tcs-msl*)    echo 'Multi-scale%20Laboratories' ;;
            *tcs-tsu*)    echo 'Tsunami' ;;
            *tcs-satd*)   echo 'Satellite%20Data' ;;
            *tcs-nfo*)    echo 'Near%20Fault%20Observatories' ;;
            *tcs-ah*)     echo 'Anthropogenic%20Hazards' ;;
            *)            echo 'ALL' >&2; echo 'ALL' ;;
          esac
        }

        max="$${MAX_PARALLEL:-10}"
        count=0
        echo "[start] parallel ingest (MAX_PARALLEL=$$max)"

        for i in $${files}; do
          filename="$${i##*/}"
          groupname="$$(get_group_name "$$i")"
          echo "  -> $$i  (group=$$groupname)"
          (
            curl -fsS -X POST --header "accept: */*" \
              "http://{{ include "epos-chart.fullname"  . }}-ingestorservice:8080/api/ingestor-service/v1/populate?path=http://{{ include "epos-chart.fullname"  . }}-metadatapopulator/$$filename&securityCode={{ .Values.metadatapopulator.environment.SECURITY_CODE }}&model=EPOS-DCAT-AP-V1&mapping=EDM-TO-DCAT-AP&type=single&metadataGroup=$$groupname"
            echo "     [ok] $$i"
          ) &
          count=$$((count + 1))
          if [ $$((count % max)) -eq 0 ]; then
            wait
          fi
        done

        wait
        duration=$$SECONDS
        echo "[done] Total ingestion time: $$((duration/60))m $$((duration%60))s"
    depends_on:
      gateway:
        condition: service_healthy
      resourcesservice:
        condition: service_healthy
      backofficeservice:
        condition: service_healthy
      ingestorservice:
        condition: service_healthy
      externalaccessservice:
        condition: service_healthy
      converterservice:
        condition: service_healthy
      converterroutine:
        condition: service_healthy
      sharingservice:
        condition: service_healthy
      emailsenderservice:
        condition: service_healthy
      dataportal:
        condition: service_healthy
      backofficeui:
        condition: service_healthy
    labels:
      katenary.v3/values: |-
        - SECURITY_CODE
        - INDEX_URL
        - MAX_PARALLEL

  rabbitmq:
    image: "${RABBITMQ_IMAGE}"
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    #healthcheck:
    #  test: rabbitmq-diagnostics -q ping
    #  interval: 30s
    #  timeout: 10s
    #  retries: 10
    networks:
      - epos_network
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "RabbitMQ Message Broker"
      katenary.v3/values: |-
        - RABBITMQ_DEFAULT_PASS
        - RABBITMQ_DEFAULT_USER
        - RABBITMQ_DEFAULT_VHOST
      katenary.v3/ports: |-
        - 5672
      katenary.v3/health-check: |-
        livenessProbe:
          exec:
            command: ["/opt/rabbitmq/sbin/rabbitmq-diagnostics", "-q", "ping"]
          initialDelaySeconds: 60
          periodSeconds: 10
          failureThreshold: 6

  resourcesservice:
    image: "${RESOURCES_SERVICE_IMAGE}"
    container_name: resources-service
    networks:
      - epos_network
    restart: always
    environment:
      - BROKER_HOST=${RABBITMQ_HOST}
      - BROKER_USERNAME=${RABBITMQ_USERNAME}
      - BROKER_PASSWORD=${RABBITMQ_PASSWORD}
      - BROKER_VHOST=${RABBITMQ_VHOST}
      - FACETS_DEFAULT=${FACETS_DEFAULT}
      - FACETS_TYPE_DEFAULT=${FACETS_TYPE_DEFAULT}
      - APICONTEXT=${API_PATH}
      - APIHOST=${APIHOST}
      - MONITORING=${MONITORING}
      - MONITORING_URL=${MONITORING_URL}
      - MONITORING_USER=${MONITORING_USER}
      - MONITORING_PWD=${MONITORING_PWD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRESQL_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/resources-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      rabbitmq:
        condition: service_healthy
      metadatadatabase:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS Resources Service"
      katenary.v3/values: |-
        - BROKER_HOST
        - BROKER_USERNAME
        - BROKER_PASSWORD
        - BROKER_VHOST
        - FACETS_DEFAULT
        - FACETS_TYPE_DEFAULT
        - APICONTEXT
        - APIHOST
        - MONITORING
        - MONITORING_URL
        - MONITORING_USER
        - MONITORING_PWD
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_DB
        - POSTGRESQL_CONNECTION_STRING
        - PERSISTENCE_NAME
        - CONNECTION_POOL_INIT_SIZE
        - CONNECTION_POOL_MIN_SIZE
        - CONNECTION_POOL_MAX_SIZE
      katenary.v3/ports: |-
        - 8080

  backofficeservice:
    image: "${BACKOFFICE_SERVICE_IMAGE}"
    container_name: backoffice-service
    networks:
      - epos_network
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRESQL_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/backoffice-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      metadatadatabase:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS Backoffice Service"
      katenary.v3/values: |-
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_DB
        - POSTGRESQL_CONNECTION_STRING
        - CONNECTION_POOL_INIT_SIZE
        - CONNECTION_POOL_MIN_SIZE
        - CONNECTION_POOL_MAX_SIZE
        - PERSISTENCE_NAME
      katenary.v3/ports: |-
        - 8080

  ingestorservice:
    image: "${INGESTOR_SERVICE_IMAGE}"
    container_name: ingestor-service
    networks:
      - epos_network
    restart: always
    environment:
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRESQL_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
      - INGESTOR_HASH=${INGESTOR_HASH}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/ingestor-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      metadatadatabase:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS Ingestor Service"
      katenary.v3/values: |-
        - PERSISTENCE_NAME
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_DB
        - POSTGRESQL_CONNECTION_STRING
        - INGESTOR_HASH
        - CONNECTION_POOL_INIT_SIZE
        - CONNECTION_POOL_MIN_SIZE
        - CONNECTION_POOL_MAX_SIZE
      katenary.v3/ports: |-
        - 8080

  externalaccessservice:
    image: "${EXTERNAL_ACCESS_IMAGE}"
    container_name: external-access-service
    networks:
      - epos_network
    restart: always
    environment:
      - BROKER_HOST=${RABBITMQ_HOST}
      - BROKER_USERNAME=${RABBITMQ_USERNAME}
      - BROKER_PASSWORD=${RABBITMQ_PASSWORD}
      - BROKER_VHOST=${RABBITMQ_VHOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRESQL_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/external-access-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      metadatadatabase:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS External Access Service"
      katenary.v3/values: |-
        - BROKER_HOST
        - BROKER_USERNAME
        - BROKER_PASSWORD
        - BROKER_VHOST
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_DB
        - POSTGRESQL_CONNECTION_STRING
        - CONNECTION_POOL_INIT_SIZE
        - CONNECTION_POOL_MIN_SIZE
        - CONNECTION_POOL_MAX_SIZE
      katenary.v3/ports: |-
        - 8080

  converterservice:
    image: "${CONVERTER_SERVICE_IMAGE}"
    container_name: converter-service
    volumes:
      - converter:/opt/converter/plugins
    networks:
      - epos_network
    restart: always
    environment:
      - BROKER_HOST=${RABBITMQ_HOST}
      - BROKER_USERNAME=${RABBITMQ_USERNAME}
      - BROKER_PASSWORD=${RABBITMQ_PASSWORD}
      - BROKER_VHOST=${RABBITMQ_VHOST}
      - LOG_LEVEL=INFO
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRESQL_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
    depends_on:
      metadatadatabase:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: "wget --quiet --tries=1 -O - http://localhost:8080/api/converter-service/v1/actuator/health | grep -i 'healthy' || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "EPOS Converter Service"
      katenary.v3/values: |-
        - BROKER_HOST
        - BROKER_USERNAME
        - BROKER_PASSWORD
        - BROKER_VHOST
        - LOG_LEVEL
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_DB
        - POSTGRESQL_CONNECTION_STRING
      katenary.v3/ports: |-
        - 8080

  converterroutine:
    image: "${CONVERTER_ROUTINE_IMAGE}"
    container_name: converter-routine
    volumes:
      - converter:/opt/converter/plugins
    networks:
      - epos_network
    restart: always
    environment:
      - LOG_LEVEL=INFO
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
      - BROKER_HOST=${RABBITMQ_HOST}
      - BROKER_USERNAME=${RABBITMQ_USERNAME}
      - BROKER_PASSWORD=${RABBITMQ_PASSWORD}
      - BROKER_VHOST=${RABBITMQ_VHOST}
      - CONVERTER_CATALOGUE_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
    depends_on:
      metadatadatabase:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: "wget --quiet --tries=1 -O - http://localhost:8080/api/converter-routine/v1/actuator/health | grep -i 'healthy' || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/ports: |-
        - 8080
      katenary.v3/description: "EPOS Converter Routine"
      katenary.v3/values: |-
        - LOG_LEVEL
        - PERSISTENCE_NAME
        - BROKER_HOST
        - BROKER_USERNAME
        - BROKER_PASSWORD
        - BROKER_VHOST
        - CONVERTER_CATALOGUE_CONNECTION_STRING

  emailsenderservice:
    image: ${EMAIL_SENDER_SERVICE_IMAGE}
    container_name: email-sender-service
    networks:
      - epos_network
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRESQL_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
      - CONNECTION_POOL_INIT_SIZE=${CONNECTION_POOL_INIT_SIZE}
      - CONNECTION_POOL_MIN_SIZE=${CONNECTION_POOL_MIN_SIZE}
      - CONNECTION_POOL_MAX_SIZE=${CONNECTION_POOL_MAX_SIZE}
      - ENVIRONMENT_TYPE=${ENVIRONMENT_TYPE}
      - SENDER=${SENDER}
      - SENDER_NAME=${SENDER_NAME}
      - MAIL_TYPE=${MAIL_TYPE}
      - SENDER_DOMAIN=${SENDER_DOMAIN}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - DEV_EMAILS=${DEV_EMAILS}
      - MAIL_API_URL=${MAIL_API_URL}
      - MAIL_API_KEY=${MAIL_API_KEY}
      - PERSISTENCE_NAME=${PERSISTENCE_NAME}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/email-sender-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      metadatadatabase:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/ports: |-
        - 8080
      katenary.v3/description: "EPOS Email Sender Service"
      katenary.v3/values: |-
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_DB
        - POSTGRESQL_CONNECTION_STRING
        - CONNECTION_POOL_INIT_SIZE
        - CONNECTION_POOL_MIN_SIZE
        - CONNECTION_POOL_MAX_SIZE
        - ENVIRONMENT_TYPE
        - SENDER
        - SENDER_NAME
        - MAIL_TYPE
        - SENDER_DOMAIN
        - MAIL_HOST
        - MAIL_USER
        - MAIL_PASSWORD
        - DEV_EMAILS
        - MAIL_API_URL
        - MAIL_API_KEY
        - PERSISTENCE_NAME
  
  sharingservice:
    image: ${SHARING_SERVICE_IMAGE}
    container_name: sharing-service
    networks:
      - epos_network
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRESQL_CONNECTION_STRING=${POSTGRESQL_CONNECTION_STRING}
      - PERSISTENCE_NAME_SHARING=${PERSISTENCE_NAME_SHARING}
    healthcheck:
      test: "curl --fail --silent http://localhost:8080/api/sharing-service/v1/actuator/health | grep UP || exit 1"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      metadatadatabase:
        condition: service_healthy
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/ports: |-
        - 8080
      katenary.v3/description: "EPOS Sharing Service"
      katenary.v3/values: |-
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_DB
        - POSTGRESQL_CONNECTION_STRING
        - PERSISTENCE_NAME_SHARING

  metadatadatabase:
    restart: always
    image: "${METADATA_DATABASE_IMAGE}"
    container_name: metadata-database
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - psqldata:/var/lib/postgresql
    healthcheck:
      test: "pg_isready -U postgres"
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - epos_network
    labels:
      katenary.v3/deployment: |-
        imagePullPolicy: Always
      katenary.v3/description: "PostgreSQL Metadata Catalogue Database"
      katenary.v3/values: |-
        - POSTGRES_USER
        - POSTGRES_PASSWORD
        - POSTGRES_DB
      katenary.v3/ports: |-
        - 5432

volumes:
  converter:
    external: false
  psqldata:
    external: false

networks:
  epos_network: