name: Generate Helm Chart

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.yaml'
      - '.env'
      - 'helmcreationscript.sh'
      - '.github/workflows/generatehelm.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-compose.yaml'
      - '.env'
  workflow_dispatch:
    inputs:
      chart_version:
        description: 'Helm chart version'
        required: false
        default: 'auto'
        type: string

env:
  HELM_CHART_NAME: epos-chart
  ARTIFACT_NAME: epos-chart

jobs:
  generate-helm-chart:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract branch name
      shell: bash
      run: echo "CHART_VERSION=0.0.0" >> $GITHUB_ENV
      id: extract_branch

    - name: Extract branch name for tag
      shell: bash
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "CHART_VERSION=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
      id: extract_branch_tag

    - name: Print Chart Version
      run: |    
        echo "Chart version will be: ${{ env.CHART_VERSION }}"

    - name: Install Katenary
      run: |
        sh <(curl -sSL https://repo.katenary.io/Katenary/katenary/raw/branch/master/install.sh)
        
        # Verify installation
        katenary version

    - name: Validate Docker Compose file
      run: |
        # Check if docker-compose.yaml exists and is valid
        if [ ! -f docker-compose.yaml ]; then
          echo "Error: docker-compose.yaml not found"
          exit 1
        fi
        
        # Basic syntax validation
        docker compose config --quiet

    - name: Generate Helm Chart
      run: |
        chmod +x helmcreationscript.sh

        ./helmcreationscript.sh

    - name: Validate Generated Helm Chart
      run: |
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        # Validate the generated chart
        helm lint ${{ env.HELM_CHART_NAME }}
        
        # Test template rendering
        helm template test-release ${{ env.HELM_CHART_NAME }} \
          --set namespace=test-namespace \
          --set ingressClass=nginx \
          --dry-run > /dev/null
        
        echo "âœ… Helm chart validation successful"

    - name: Create zip artifact
      run: |
        helm package ${{ env.HELM_CHART_NAME }}

    - name: Upload Helm Chart artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}
        path: ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
        retention-days: 30
        compression-level: 6

    - name: Upload individual chart files
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart-files-${{ env.CHART_VERSION }}
        path: |
          ${{ env.HELM_CHART_NAME }}/values.yaml
        retention-days: 30

    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Helm Chart Release ${{ github.ref }}
        body: |
          ## Helm Chart Release
          
          This release contains the generated Helm chart for the EPOS system.
          
          ### Chart Details
          - **Chart Version:** ${{ env.CHART_VERSION }}
          - **Generated from:** ${{ github.sha }}
          - **Generated on:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### Installation
          ```bash
          # Download and extract the chart
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref }}/${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
          unzip ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
          
          # Install with Helm
          helm install epos-system ./${{ env.HELM_CHART_NAME }}
          ```
          
          ### Files included
          - Helm chart templates
          - values.yaml with all configuration options
          - Example configuration files
          - Installation scripts
        draft: false
        prerelease: false

    - name: Summaryf
      run: |
        echo "## ðŸŽ‰ Helm Chart Generation Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Name:** ${{ env.HELM_CHART_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Version:** ${{ env.CHART_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Name:** ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the artifact from the Actions tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Extract the zip file" >> $GITHUB_STEP_SUMMARY
        echo "3. Review the generated Helm chart" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy using: \`helm install epos-system ./${{ env.HELM_CHART_NAME }}\`" >> $GITHUB_STEP_SUMMARY