name: Generate Helm Chart

on:
  push:
    branches: [ main, develop ]
    tags:       # build on tag push
      - 'v*'
      - '*.*.*'
    paths:
      - 'docker-compose.yaml'
      - '.env'
      - 'helmcreationscript.sh'
      - '.github/workflows/generatehelm.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-compose.yaml'
      - '.env'
  release:       # also run when a Release is published from the UI/API
    types: [published]
  workflow_dispatch:
    inputs:
      chart_version:
        description: 'Helm chart version (leave as auto to infer)'
        required: false
        default: 'auto'
        type: string

permissions:
  contents: write   # required to create/update releases and upload assets

env:
  HELM_CHART_NAME: epos-chart

jobs:
  generate-helm-chart:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Decide the chart version:
      # - release event -> use release tag
      # - tag push -> use tag name
      # - manual dispatch with explicit value -> use that
      # - else -> 0.0.0+<shortsha>
      - name: Resolve chart version
        id: version
        shell: bash
        run: |
          CHART_VERSION=""
          if [ "${{ github.event_name }}" = "release" ]; then
            CHART_VERSION="${{ github.event.release.tag_name }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            CHART_VERSION="${GITHUB_REF_NAME}"
          elif [ "${{ inputs.chart_version }}" != "" ] && [ "${{ inputs.chart_version }}" != "auto" ]; then
            CHART_VERSION="${{ inputs.chart_version }}"
          else
            CHART_VERSION="0.0.0+${GITHUB_SHA:0:7}"
          fi
          # strip leading "v" if present
          CHART_VERSION="${CHART_VERSION#v}"
          echo "CHART_VERSION=${CHART_VERSION}" | tee -a $GITHUB_ENV
          echo "version=${CHART_VERSION}" >> $GITHUB_OUTPUT

      - name: Print Chart Version
        run: |
           echo "Chart version will be: ${{ env.CHART_VERSION }}"

      - name: Install Katenary
        run: |
          sh <(curl -sSL https://repo.katenary.io/Katenary/katenary/raw/branch/master/install.sh)
          katenary version

      - name: Validate Docker Compose file
        run: |
          if [ ! -f docker-compose.yaml ]; then
            echo "Error: docker-compose.yaml not found"
            exit 1
          fi
          docker compose config --quiet

      - name: Generate Helm Chart
        run: |
          chmod +x helmcreationscript.sh
          ./helmcreationscript.sh

      - name: Install Helm & validate chart
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm lint "${{ env.HELM_CHART_NAME }}"
          helm template test-release "${{ env.HELM_CHART_NAME }}" \
            --set namespace=test-namespace \
            --set ingressClass=nginx \
            --dry-run > /dev/null
          echo "âœ… Helm chart validation successful"

      - name: Package Helm chart (versioned)
        run: |
          helm package "${{ env.HELM_CHART_NAME }}" --version "${{ env.CHART_VERSION }}"

      # ---- Action artifacts (always, handy for CI users) ----
      - name: Upload packaged chart
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}
          path: ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
          retention-days: 30
          compression-level: 6

      - name: Upload values.yaml
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-files-${{ env.CHART_VERSION }}
          path: ${{ env.HELM_CHART_NAME }}/values.yaml
          retention-days: 30

      # ---- Release assets (on tag push or published release) ----
      # This will create (on tag) or update (on release) the GitHub Release and attach files.
      - name: Attach assets to GitHub Release
        if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref_name }}
          name: Helm Chart Release ${{ env.CHART_VERSION }}
          body: |
            ## Helm Chart Release

            **Chart:** `${{ env.HELM_CHART_NAME }}`  
            **Version:** `${{ env.CHART_VERSION }}`  
            **Commit:** `${{ github.sha }}`

            ### Quick install
            ```bash
            # Download the packaged chart
            gh release download ${{ github.event_name == 'release' && github.event.release.tag_name || github.ref_name }} -p '${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz'
            # Install with Helm
            helm install epos-system ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
            ```
          files: |
            ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz
            ${{ env.HELM_CHART_NAME }}/values.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          {
            echo "## ðŸŽ‰ Helm Chart Generation Complete!"
            echo ""
            echo "### Generated Artifacts:"
            echo "- **Chart Name:** ${{ env.HELM_CHART_NAME }}"
            echo "- **Chart Version:** ${{ env.CHART_VERSION }}"
            echo "- **Artifact:** ${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz"
            echo "- **Commit:** ${{ github.sha }}"
            echo ""
            echo "### Next Steps:"
            echo "1. Grab the artifact from the Actions run, or from the Release assets (on tag/release)."
            echo "2. Review the chart and values."
            echo "3. Deploy: \`helm install epos-system ./${{ env.HELM_CHART_NAME }}-${{ env.CHART_VERSION }}.tgz\`"
          } >> "$GITHUB_STEP_SUMMARY"
