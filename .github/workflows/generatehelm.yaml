name: Generate Helm Chart

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'docker-compose.yml'
      - '.env'
      - '.github/workflows/helm-chart.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-compose.yml'
      - '.env'
  workflow_dispatch:
    inputs:
      chart_version:
        description: 'Helm chart version'
        required: false
        default: 'auto'
        type: string

env:
  HELM_CHART_NAME: epos-chart
  ARTIFACT_NAME: epos-helm-chart

jobs:
  generate-helm-chart:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        # Copy example env file if .env doesn't exist
        if [ ! -f .env ]; then
          cp .env.example .env
        fi
        
        # Set default values for chart generation
        echo "NAMESPACE=epos-system" >> .env
        echo "INGRESS_CLASS=nginx" >> .env
        echo "DATAPORTAL_DEPLOY_PATH=/portal" >> .env
        echo "API_DEPLOY_PATH=/api" >> .env
        echo "BACKOFFICE_DEPLOY_PATH=/backoffice" >> .env
        
        # Set chart version
        if [ "${{ github.event.inputs.chart_version }}" = "auto" ] || [ -z "${{ github.event.inputs.chart_version }}" ]; then
          CHART_VERSION="1.0.0-${GITHUB_SHA:0:7}"
        else
          CHART_VERSION="${{ github.event.inputs.chart_version }}"
        fi
        echo "CHART_VERSION=${CHART_VERSION}" >> $GITHUB_ENV
        echo "Chart version will be: ${CHART_VERSION}"

    - name: Install Katenary
      run: |
        # Download and install Katenary
        KATENARY_VERSION="v1.0.0"  # Replace with latest version
        wget -O katenary.tar.gz "https://github.com/metal-stack/katenary/releases/download/${KATENARY_VERSION}/katenary_Linux_x86_64.tar.gz"
        tar -xzf katenary.tar.gz
        sudo mv katenary /usr/local/bin/
        chmod +x /usr/local/bin/katenary
        
        # Verify installation
        katenary version

    - name: Validate Docker Compose file
      run: |
        # Check if docker-compose.yml exists and is valid
        if [ ! -f docker-compose.yml ]; then
          echo "Error: docker-compose.yml not found"
          exit 1
        fi
        
        # Basic syntax validation
        docker-compose config --quiet

    - name: Generate Helm Chart
      run: |
        chmod +x helmcreationscript.sh

        ./helmcreationscript.sh

    - name: Customize Helm Chart
      run: |
        # Update Chart.yaml with additional metadata
        cat >> helm-output/${{ env.HELM_CHART_NAME }}/Chart.yaml << EOF
        description: EPOS (European Plate Observing System) - Microservices deployment
        keywords:
          - epos
          - microservices
          - data-portal
          - geoscience
        home: https://github.com/${{ github.repository }}
        sources:
          - https://github.com/${{ github.repository }}
        maintainers:
          - name: ${{ github.actor }}
            email: ${{ github.actor }}@users.noreply.github.com
        EOF
        
        # Add a README to the chart
        cat > helm-output/${{ env.HELM_CHART_NAME }}/README.md << EOF
        # ${{ env.HELM_CHART_NAME }}
        
        This Helm chart deploys the EPOS system microservices.
        
        ## Installation
        
        \`\`\`bash
        helm install epos-system ./ \\
          --set namespace=your-namespace \\
          --set ingressClass=nginx \\
          --set dataportalDeployPath=/portal \\
          --set apiDeployPath=/api \\
          --set backofficeDeployPath=/backoffice
        \`\`\`
        
        ## Generated from
        - Repository: ${{ github.repository }}
        - Commit: ${{ github.sha }}
        - Workflow: ${{ github.workflow }}
        - Generated on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF

    - name: Validate Generated Helm Chart
      run: |
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        
        # Validate the generated chart
        helm lint helm-output/${{ env.HELM_CHART_NAME }}
        
        # Test template rendering
        helm template test-release helm-output/${{ env.HELM_CHART_NAME }} \
          --set namespace=test-namespace \
          --set ingressClass=nginx \
          --dry-run > /dev/null
        
        echo "âœ… Helm chart validation successful"

    - name: Create deployment examples
      run: |
        # Create examples directory
        mkdir -p helm-output/examples
        
        # Create production values example
        cat > helm-output/examples/values-production.yaml << EOF
        # Production values for EPOS Helm Chart
        namespace: epos-production
        ingressClass: nginx
        
        # Deployment paths
        dataportalDeployPath: /portal
        apiDeployPath: /api
        backofficeDeployPath: /backoffice
        
        # Database configuration
        postgresUser: epos_user
        postgresDb: epos_metadata
        
        # RabbitMQ configuration
        rabbitmqUsername: epos_user
        rabbitmqVhost: epos
        
        # Environment type
        environmentType: production
        
        # Resource limits (example)
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 512Mi
        EOF
        
        # Create development values example
        cat > helm-output/examples/values-development.yaml << EOF
        # Development values for EPOS Helm Chart
        namespace: epos-dev
        ingressClass: nginx
        
        # Deployment paths
        dataportalDeployPath: /portal
        apiDeployPath: /api
        backofficeDeployPath: /backoffice
        
        # Database configuration
        postgresUser: postgres
        postgresDb: epos_dev
        
        # RabbitMQ configuration
        rabbitmqUsername: guest
        rabbitmqVhost: /
        
        # Environment type
        environmentType: development
        
        # Development specific settings
        monitoring: false
        logLevel: DEBUG
        EOF
        
        # Create installation script
        cat > helm-output/examples/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        NAMESPACE=${1:-epos-system}
        VALUES_FILE=${2:-values-production.yaml}
        RELEASE_NAME=${3:-epos-system}
        
        echo "Installing EPOS Helm Chart..."
        echo "Namespace: $NAMESPACE"
        echo "Values file: $VALUES_FILE"
        echo "Release name: $RELEASE_NAME"
        
        # Create namespace if it doesn't exist
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Install the chart
        helm upgrade --install $RELEASE_NAME ./ \
          --namespace $NAMESPACE \
          --values examples/$VALUES_FILE \
          --wait
        
        echo "âœ… EPOS system installed successfully!"
        EOF
        
        chmod +x helm-output/examples/install.sh

    - name: Create zip artifact
      run: |
        # Create timestamp for artifact naming
        TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
        ARTIFACT_ZIP="${{ env.ARTIFACT_NAME }}-${CHART_VERSION}-${TIMESTAMP}.zip"
        
        # Create the zip file
        cd helm-output
        zip -r "../${ARTIFACT_ZIP}" ${{ env.HELM_CHART_NAME }}/ examples/
        cd ..
        
        # Create metadata file
        cat > chart-metadata.json << EOF
        {
          "chart_name": "${{ env.HELM_CHART_NAME }}",
          "chart_version": "${{ env.CHART_VERSION }}",
          "generated_at": "$(date -u -Iseconds)",
          "repository": "${{ github.repository }}",
          "commit_sha": "${{ github.sha }}",
          "commit_ref": "${{ github.ref }}",
          "workflow_run_id": "${{ github.run_id }}",
          "actor": "${{ github.actor }}",
          "artifact_name": "${ARTIFACT_ZIP}"
        }
        EOF
        
        # Add metadata to zip
        zip -u "${ARTIFACT_ZIP}" chart-metadata.json
        
        echo "ARTIFACT_ZIP=${ARTIFACT_ZIP}" >> $GITHUB_ENV
        
        # Show zip contents
        echo "ðŸ“¦ Zip file contents:"
        unzip -l "${ARTIFACT_ZIP}"

    - name: Upload Helm Chart artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ env.CHART_VERSION }}
        path: ${{ env.ARTIFACT_ZIP }}
        retention-days: 30
        compression-level: 6

    - name: Upload individual chart files
      uses: actions/upload-artifact@v4
      with:
        name: helm-chart-files-${{ env.CHART_VERSION }}
        path: |
          helm-output/${{ env.HELM_CHART_NAME }}/
          helm-output/examples/
        retention-days: 30

    - name: Create release on tag
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Helm Chart Release ${{ github.ref }}
        body: |
          ## Helm Chart Release
          
          This release contains the generated Helm chart for the EPOS system.
          
          ### Chart Details
          - **Chart Version:** ${{ env.CHART_VERSION }}
          - **Generated from:** ${{ github.sha }}
          - **Generated on:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ### Installation
          ```bash
          # Download and extract the chart
          wget ${{ github.server_url }}/${{ github.repository }}/releases/download/${{ github.ref }}/${{ env.ARTIFACT_ZIP }}
          unzip ${{ env.ARTIFACT_ZIP }}
          
          # Install with Helm
          helm install epos-system ./${{ env.HELM_CHART_NAME }}
          ```
          
          ### Files included
          - Helm chart templates
          - values.yaml with all configuration options
          - Example configuration files
          - Installation scripts
        draft: false
        prerelease: false

    - name: Summary
      run: |
        echo "## ðŸŽ‰ Helm Chart Generation Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Name:** ${{ env.HELM_CHART_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Version:** ${{ env.CHART_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Name:** ${{ env.ARTIFACT_ZIP }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Download the artifact from the Actions tab" >> $GITHUB_STEP_SUMMARY
        echo "2. Extract the zip file" >> $GITHUB_STEP_SUMMARY
        echo "3. Review the generated Helm chart" >> $GITHUB_STEP_SUMMARY
        echo "4. Deploy using: \`helm install epos-system ./${{ env.HELM_CHART_NAME }}\`" >> $GITHUB_STEP_SUMMARY